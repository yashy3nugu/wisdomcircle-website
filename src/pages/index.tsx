import { type NextPage } from "next";
import Head from "next/head";
import { Form, Formik } from "formik";
import FormInput from "@/components/ui/form-input";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/router";

import { api } from "@/utils/api";
import PasswordInput from "@/components/ui/password-input";
import Link from "next/link";
import { toFormikValidationSchema } from "zod-formik-adapter";
import { loginInputSchema } from "@/utils/schemas/schema";
import { useState } from "react";
import { TRPCClientError } from "@trpc/client";
import { getHTTPStatusCodeFromError } from "@trpc/server/http";
import { TRPCError } from "@trpc/server";

const Home: NextPage = () => {
  const context = api.useContext();
  const router = useRouter();

  const [errorMessage, setErrorMessage] = useState<string>("");

  const { mutateAsync } = api.auth.login.useMutation({
    onSuccess(data) {
      context.auth.user.setData(undefined, data);
    },
    // onError(error) {

    // },
    async onSettled(data) {
      if (data) {
        const redirect = (router.query.redirect as string) || "/home";
        await router.replace(redirect);
      }
    },
  });

  return (
    <>
      <p className="text-lg font-bold lg:text-2xl">Sign in to WisdomCircle</p>
      <p className="mt-1 text-brandgray">
        Don&apos;t have an account?{" "}
        <Link href="/register" className="font-semibold text-link">
          Sign Up
        </Link>
      </p>
      <Formik
        validationSchema={toFormikValidationSchema(loginInputSchema)}
        onSubmit={async (values, actions) => {
          const { emailOrMobile, password } = values;

          try {
            await mutateAsync({
              emailOrMobile,
              password,
            });
          } catch (err) {
            const error = err as any;
            
            if (error.data.code === "NOT_FOUND") {
              if (emailOrMobile.includes("@")) {
                actions.setFieldError(
                  "emailOrMobile",
                  "Sorry! This email is not registered"
                );
              } else {
                actions.setFieldError(
                  "emailOrMobile",
                  "Sorry! This mobile number is not registered"
                );
              }
            } else if (error.data.code === "UNAUTHORIZED") {
              actions.setFieldError(
                "password",
                "Sorry! Password entered is incorrect"
              );
            }
          }

          // actions.resetForm();
        }}
        initialValues={{ emailOrMobile: "", password: "" }}
      >
        {({ isValid, isSubmitting }) => {
          return (
            <Form className="mt-7 w-full">
              <FormInput
                name="emailOrMobile"
                type="text"
                placeholder="Email or Mobile Number"
              />
              <PasswordInput name="password" placeholder="Password" />
              <div className="flex justify-end">
                <Link
                  href="/forgotpassword"
                  className="text-sm font-semibold text-link"
                >
                  Forgot password?
                </Link>
              </div>
              <Button
                disabled={isSubmitting || isValid}
                className="mt-6 w-full"
              >
                Sign In
              </Button>
            </Form>
          );
        }}
      </Formik>

      {/* <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        
      </main> */}
    </>
  );
};

export default Home;
